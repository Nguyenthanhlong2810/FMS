/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.opentcs.guing.application;

import com.google.inject.Inject;
import org.opentcs.access.KernelRuntimeException;
import org.opentcs.access.SharedKernelServicePortal;
import org.opentcs.access.SharedKernelServicePortalProvider;
import org.opentcs.customizations.plantoverview.ApplicationFrame;
import org.opentcs.guing.util.ResourceBundleUtil;
import org.opentcs.guing.util.UserMessageHelper;

import javax.swing.*;

import java.util.Arrays;

import static java.util.Objects.requireNonNull;
import static org.opentcs.guing.util.I18nPlantOverview.MENU_PATH;

/**
 *
 * @author ADMIN
 */
public class ChangePasswordDialog
    extends javax.swing.JDialog {

  private static final ResourceBundleUtil BUNDLE = ResourceBundleUtil.getBundle(MENU_PATH);

  private final SharedKernelServicePortalProvider sharedProvider;

  private final UserMessageHelper messageHelper;

  /**
   * Creates new form ChangePasswordDialog
   */
  @Inject
  public ChangePasswordDialog(@ApplicationFrame JFrame applicationFrame,
                             SharedKernelServicePortalProvider sharedProvider,
                             UserMessageHelper messageHelper) {
    super(applicationFrame, true);
    this.sharedProvider = requireNonNull(sharedProvider, "sharedProvider");
    this.messageHelper = requireNonNull(messageHelper, "messageHelper");
    initComponents();
    setSize(400, 200);
    setLocationRelativeTo(applicationFrame);
    initEvents();
  }

  private void initEvents() {
    btnOk.addActionListener(e -> {
      if (!Arrays.equals(txtNewPassword.getPassword(), txtRetypePassword.getPassword())) {
       messageHelper.showMessageDialog(BUNDLE.getString("modal.title.error"),
               BUNDLE.getString("password.message.retypePasswordUnmatched"),
               UserMessageHelper.Type.ERROR);
        return;
      }
      try (SharedKernelServicePortal portal = sharedProvider.register()) {
        portal.getPortal().getNotificationService().changePassword(new String(txtCurrentPassword.getPassword()),
                new String(txtNewPassword.getPassword()));
        messageHelper.showMessageDialog(BUNDLE.getString("modal.title.notification"),
                BUNDLE.getString("password.message.passwordChanged"),
                UserMessageHelper.Type.INFO);
        this.dispose();
      } catch (KernelRuntimeException ex) {
        messageHelper.showMessageDialog(BUNDLE.getString("modal.title.error"),
                BUNDLE.getString("password.message.currentPasswordIncorrect"),
                UserMessageHelper.Type.ERROR);
      }
    });
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlContent = new javax.swing.JPanel();
        lblCurrentPassword = new javax.swing.JLabel();
        txtCurrentPassword = new javax.swing.JPasswordField();
        lblNewPassword = new javax.swing.JLabel();
        txtNewPassword = new javax.swing.JPasswordField();
        lblRetypePassword = new javax.swing.JLabel();
        txtRetypePassword = new javax.swing.JPasswordField();
        btnOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/org/opentcs/plantoverview/mainMenu"); // NOI18N
        setTitle(bundle.getString("password.title")); // NOI18N

        pnlContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 25, 10, 25));
        pnlContent.setLayout(new java.awt.GridBagLayout());

        lblCurrentPassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCurrentPassword.setText(bundle.getString("password.label.currentPassword.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlContent.add(lblCurrentPassword, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.1;
        pnlContent.add(txtCurrentPassword, gridBagConstraints);

        lblNewPassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblNewPassword.setText(bundle.getString("password.label.newPassword.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlContent.add(lblNewPassword, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.1;
        pnlContent.add(txtNewPassword, gridBagConstraints);

        lblRetypePassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblRetypePassword.setText(bundle.getString("password.label.retypePassword.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlContent.add(lblRetypePassword, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.1;
        pnlContent.add(txtRetypePassword, gridBagConstraints);

        btnOk.setText("OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weighty = 0.1;
        pnlContent.add(btnOk, gridBagConstraints);

        getContentPane().add(pnlContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel lblCurrentPassword;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblRetypePassword;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPasswordField txtCurrentPassword;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JPasswordField txtRetypePassword;
    // End of variables declaration//GEN-END:variables
}
